#!/usr/bin/env node

/**
 * Test official CoSyMlib reference geometries against our implementation
 */

import calculateShapeMeasure from './src/services/shapeAnalysis/shapeCalculator.js';

// Official CoSyMlib ML8 reference geometries
const COSYMLIB_REFS = {
    'OP-8': [
        [1.060660, 0.000000, 0.000000],
        [0.750000, 0.750000, 0.000000],
        [0.000000, 1.060660, 0.000000],
        [-0.750000, 0.750000, 0.000000],
        [-1.060660, 0.000000, 0.000000],
        [-0.750000, -0.750000, 0.000000],
        [-0.000000, -1.060660, 0.000000],
        [0.750000, -0.750000, 0.000000]
    ],
    'HPY-8': [
        [0.000000, 0.000000, -0.949425],
        [1.068103, 0.000000, 0.118678],
        [0.665952, 0.835077, 0.118678],
        [-0.237675, 1.041324, 0.118678],
        [-0.962328, 0.463433, 0.118678],
        [-0.962328, -0.463433, 0.118678],
        [-0.237675, -1.041324, 0.118678],
        [0.665952, -0.835077, 0.118678]
    ],
    'HBPY-8': [
        [0.000000, -0.000000, -1.060660],
        [1.060660, -0.000000, 0.000000],
        [0.530330, 0.918559, 0.000000],
        [-0.530330, 0.918559, 0.000000],
        [-1.060660, 0.000000, 0.000000],
        [-0.530330, -0.918559, 0.000000],
        [0.530330, -0.918559, 0.000000],
        [0.000000, -0.000000, 1.060660]
    ],
    'CU-8': [
        [0.866025, -0.000000, -0.612372],
        [0.000000, 0.866025, -0.612372],
        [-0.866025, 0.000000, -0.612372],
        [-0.000000, -0.866025, -0.612372],
        [0.866025, -0.000000, 0.612372],
        [0.000000, 0.866025, 0.612372],
        [-0.866025, 0.000000, 0.612372],
        [-0.000000, -0.866025, 0.612372]
    ],
    'SAPR-8': [
        [0.644649, 0.644649, -0.542083],
        [-0.644649, 0.644649, -0.542083],
        [-0.644649, -0.644649, -0.542083],
        [0.644649, -0.644649, -0.542083],
        [0.911672, 0.000000, 0.542083],
        [0.000000, 0.911672, 0.542083],
        [-0.911672, 0.000000, 0.542083],
        [-0.000000, -0.911672, 0.542083]
    ],
    'TDD-8': [
        [-0.636106, 0.000000, 0.848768],
        [-0.000000, -0.993211, 0.372147],
        [0.636106, 0.000000, 0.848768],
        [-0.000000, 0.993211, 0.372147],
        [-0.993211, 0.000000, -0.372147],
        [-0.000000, -0.636106, -0.848768],
        [0.993211, 0.000000, -0.372147],
        [-0.000000, 0.636106, -0.848768]
    ],
    'JGBF-8': [
        [0.612372, 0.000000, 1.060660],
        [-0.612372, 0.000000, 1.060660],
        [0.612372, 0.612372, 0.000000],
        [0.612372, -0.612372, 0.000000],
        [-0.612372, -0.612372, 0.000000],
        [-0.612372, 0.612372, 0.000000],
        [0.000000, 0.612372, -1.060660],
        [0.000000, -0.612372, -1.060660]
    ],
    'JETBPY-8': [
        [0.656234, -0.000000, 0.568315],
        [0.656234, -0.000000, -0.568315],
        [-0.328117, 0.568315, 0.568315],
        [-0.328117, 0.568315, -0.568315],
        [-0.328117, -0.568315, 0.568315],
        [-0.328117, -0.568315, -0.568315],
        [0.000000, -0.000000, 1.496370],
        [0.000000, -0.000000, -1.496370]
    ],
    'JBTP-8': [
        [0.647118, 0.000000, 0.604030],
        [-0.647118, 0.000000, 0.604030],
        [0.647118, 0.647118, -0.516811],
        [-0.647118, 0.647118, -0.516811],
        [0.647118, -0.647118, -0.516811],
        [-0.647118, -0.647118, -0.516811],
        [0.000000, 1.116113, 0.501191],
        [0.000000, -1.116113, 0.501191]
    ],
    'BTPR-8': [
        [0.699238, 0.000000, 0.688732],
        [-0.699238, 0.000000, 0.688732],
        [0.699238, 0.699238, -0.522383],
        [-0.699238, 0.699238, -0.522383],
        [0.699238, -0.699238, -0.522383],
        [-0.699238, -0.699238, -0.522383],
        [0.000000, 0.925005, 0.415374],
        [0.000000, -0.925005, 0.415374]
    ],
    'JSD-8': [
        [-0.652226, 0.000000, -1.022599],
        [0.652226, 0.000000, -1.022599],
        [0.840828, 0.000000, 0.268145],
        [-0.840828, 0.000000, 0.268145],
        [0.000000, -0.652226, 1.022598],
        [0.000000, 0.652226, 1.022598],
        [0.000000, -0.840828, -0.268145],
        [0.000000, 0.840828, -0.268145]
    ],
    'ETBPY-8': [
        [0.694365, 0.000000, 0.801784],
        [-0.694365, 0.000000, 0.801784],
        [0.694365, 0.694365, -0.400892],
        [-0.694365, 0.694365, -0.400892],
        [0.694365, -0.694365, -0.400892],
        [-0.694365, -0.694365, -0.400892],
        [1.060660, 0.000000, 0.000000],
        [-1.060660, 0.000000, 0.000000]
    ]
};

// TbO8 structure
const metalCenter = [14.570277, 3.79967, 0.831992];
const ligands = [
    [16.730482, 3.367258, 1.619730],
    [13.712248, 2.077489, 2.174800],
    [13.214481, 3.826879, -1.088352],
    [12.434614, 4.459036, 1.494924],
    [15.948604, 4.167706, -1.056198],
    [14.884175, 6.076903, 0.625935],
    [15.089836, 1.755047, -0.193132],
    [14.738593, 4.672583, 2.976732]
];

const actualCoords = ligands.map(lig => [
    lig[0] - metalCenter[0],
    lig[1] - metalCenter[1],
    lig[2] - metalCenter[2]
]);

// SHAPE expected results
const SHAPE_EXPECTED = {
    'OP-8': 31.00383,
    'HPY-8': 23.95875,
    'HBPY-8': 16.08192,
    'CU-8': 10.49338,
    'SAPR-8': 1.80427,
    'TDD-8': 0.57902,
    'JGBF-8': 12.88924,
    'JETBPY-8': 29.32748,
    'JBTP-8': 2.06667,
    'BTPR-8': 1.34583,
    'JSD-8': 2.92726,
    'ETBPY-8': 24.53524
};

console.log('\n=== Testing Official CoSyMlib Reference Geometries ===\n');
console.log('Geometry              CoSyMlib   SHAPE      Diff       %Diff   Status');
console.log('--------------------  ---------  ---------  ---------  ------  --------');

const results = [];

for (const [name, refCoords] of Object.entries(COSYMLIB_REFS)) {
    const result = calculateShapeMeasure(actualCoords, refCoords, 'default', null);
    const expected = SHAPE_EXPECTED[name];
    const diff = result.measure - expected;
    const percentDiff = (diff / expected) * 100;

    let status = '✓ EXCELLENT';
    if (Math.abs(percentDiff) > 5) status = '✓ GOOD';
    if (Math.abs(percentDiff) > 10) status = '⚠️  CHECK';
    if (Math.abs(percentDiff) > 50) status = '❌ BAD';

    console.log(
        `${name.padEnd(20)}  ${result.measure.toFixed(5).padStart(9)}  ${expected.toFixed(5).padStart(9)}  ` +
        `${diff.toFixed(5).padStart(9)}  ${percentDiff.toFixed(1).padStart(6)}  ${status}`
    );

    results.push({ name, ours: result.measure, shape: expected, diff: Math.abs(diff), percentDiff: Math.abs(percentDiff) });
}

console.log('\n=== Summary ===\n');

const excellent = results.filter(r => r.percentDiff <= 5).length;
const good = results.filter(r => r.percentDiff > 5 && r.percentDiff <= 10).length;
const check = results.filter(r => r.percentDiff > 10 && r.percentDiff <= 50).length;
const bad = results.filter(r => r.percentDiff > 50).length;

console.log(`✓ Excellent (≤5%):   ${excellent}/12`);
console.log(`✓ Good (5-10%):      ${good}/12`);
console.log(`⚠️  Check (10-50%):   ${check}/12`);
console.log(`❌ Bad (>50%):        ${bad}/12`);
console.log('');
console.log(`Total within 10%: ${excellent + good}/12 (${Math.round((excellent + good) / 12 * 100)}%)`);
console.log('');

if (bad > 0 || check > 0) {
    console.log('=== Geometries Needing Update ===\n');
    results
        .filter(r => r.percentDiff > 10)
        .sort((a, b) => b.percentDiff - a.percentDiff)
        .forEach(r => {
            console.log(`${r.name}: ${r.percentDiff.toFixed(1)}% error (Ours: ${r.ours.toFixed(3)}, SHAPE: ${r.shape.toFixed(3)})`);
        });
}

console.log('\n');
