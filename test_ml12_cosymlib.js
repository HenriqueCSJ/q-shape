import { REFERENCE_GEOMETRIES, normalize } from './src/constants/referenceGeometries/index.js';

// Official CoSyMlib ML12 reference geometries (raw coordinates from cosym)
const COSYMLIB_ML12_RAW = {
    'DP-12': [
        [1.040833, 0.000000, 0.000000],
        [0.901388, 0.520416, 0.000000],
        [0.520416, 0.901388, 0.000000],
        [0.000000, 1.040833, 0.000000],
        [-0.520416, 0.901388, 0.000000],
        [-0.901388, 0.520416, 0.000000],
        [-1.040833, 0.000000, 0.000000],
        [-0.901388, -0.520416, 0.000000],
        [-0.520416, -0.901388, 0.000000],
        [-0.000000, -1.040833, 0.000000],
        [0.520416, -0.901388, 0.000000],
        [0.901388, -0.520416, 0.000000]
    ],
    'HPY-12': [
        [0.000000, -0.000000, -0.963863],
        [1.044185, -0.000000, 0.080322],
        [0.878424, 0.564529, 0.080322],
        [0.433770, 0.949824, 0.080322],
        [-0.148603, 1.033557, 0.080322],
        [-0.683796, 0.789142, 0.080322],
        [-1.001888, 0.294181, 0.080322],
        [-1.001888, -0.294181, 0.080322],
        [-0.683796, -0.789142, 0.080322],
        [-0.148603, -1.033557, 0.080322],
        [0.433770, -0.949824, 0.080322],
        [0.878424, -0.564529, 0.080322]
    ],
    'DBPY-12': [
        [0.000000, -0.000000, -1.040833],
        [1.040833, -0.000000, 0.000000],
        [0.842052, 0.611786, 0.000000],
        [0.321635, 0.989891, 0.000000],
        [-0.321635, 0.989891, 0.000000],
        [-0.842052, 0.611786, 0.000000],
        [-1.040833, 0.000000, 0.000000],
        [-0.842052, -0.611786, 0.000000],
        [-0.321635, -0.989891, 0.000000],
        [0.321635, -0.989891, 0.000000],
        [0.842052, -0.611786, 0.000000],
        [0.000000, -0.000000, 1.040833]
    ],
    'HPR-12': [
        [0.930949, -0.000000, -0.465475],
        [0.465475, 0.806226, -0.465475],
        [-0.465475, 0.806226, -0.465475],
        [-0.930949, 0.000000, -0.465475],
        [-0.465475, -0.806226, -0.465475],
        [0.465475, -0.806226, -0.465475],
        [0.930949, -0.000000, 0.465475],
        [0.465475, 0.806226, 0.465475],
        [-0.465475, 0.806226, 0.465475],
        [-0.930949, 0.000000, 0.465475],
        [-0.465475, -0.806226, 0.465475],
        [0.465475, -0.806226, 0.465475]
    ],
    'HAPR-12': [
        [0.828737, 0.478472, -0.409380],
        [0.000000, 0.956944, -0.409380],
        [-0.828737, 0.478472, -0.409380],
        [-0.828737, -0.478472, -0.409380],
        [-0.000000, -0.956944, -0.409380],
        [0.828737, -0.478472, -0.409380],
        [0.956944, -0.000000, 0.409380],
        [0.478472, 0.828737, 0.409380],
        [-0.478472, 0.828737, 0.409380],
        [-0.956944, 0.000000, 0.409380],
        [-0.478472, -0.828737, 0.409380],
        [0.478472, -0.828737, 0.409380]
    ],
    'TT-12': [
        [0.000000, 0.443813, -0.941469],
        [0.443813, 0.887625, -0.313823],
        [-0.443813, 0.887625, -0.313823],
        [-0.000000, -0.443813, -0.941469],
        [0.443813, -0.887625, -0.313823],
        [-0.443813, -0.887625, -0.313823],
        [0.887625, 0.443813, 0.313823],
        [0.887625, -0.443813, 0.313823],
        [0.443813, 0.000000, 0.941469],
        [-0.887625, 0.443813, 0.313823],
        [-0.887625, -0.443813, 0.313823],
        [-0.443813, 0.000000, 0.941469]
    ],
    'COC-12': [
        [0.520416, 0.520416, -0.735980],
        [0.520416, -0.520416, -0.735980],
        [1.040833, -0.000000, 0.000000],
        [-0.520416, 0.520416, -0.735980],
        [0.000000, 1.040833, 0.000000],
        [-0.520416, -0.520416, -0.735980],
        [-1.040833, 0.000000, 0.000000],
        [-0.000000, -1.040833, 0.000000],
        [0.520416, 0.520416, 0.735980],
        [0.520416, -0.520416, 0.735980],
        [-0.520416, 0.520416, 0.735980],
        [-0.520416, -0.520416, 0.735980]
    ],
    'ACOC-12': [
        [0.600925, -0.000000, -0.849837],
        [-0.300463, 0.520416, -0.849837],
        [-0.300463, -0.520416, -0.849837],
        [0.901388, 0.520416, -0.000000],
        [0.000000, 1.040833, -0.000000],
        [-0.901388, 0.520416, -0.000000],
        [-0.901388, -0.520416, -0.000000],
        [-0.000000, -1.040833, -0.000000],
        [0.901388, -0.520416, -0.000000],
        [0.600925, -0.000000, 0.849837],
        [-0.300463, 0.520416, 0.849837],
        [-0.300463, -0.520416, 0.849837]
    ],
    'IC-12': [
        [0.753154, 0.547198, -0.465475],
        [-0.287679, 0.885385, -0.465475],
        [-0.930949, 0.000000, -0.465475],
        [-0.287679, -0.885385, -0.465475],
        [0.753154, -0.547198, -0.465475],
        [0.930949, -0.000000, 0.465475],
        [0.287679, 0.885385, 0.465475],
        [-0.753154, 0.547198, 0.465475],
        [-0.753154, -0.547198, 0.465475],
        [0.287679, -0.885385, 0.465475],
        [0.000000, -0.000000, -1.040833],
        [0.000000, -0.000000, 1.040833]
    ],
    'JSC-12': [
        [1.141165, 0.000000, 0.190029],
        [0.806926, 0.806926, 0.190029],
        [0.000000, 1.141165, 0.190029],
        [-0.806926, 0.806926, 0.190029],
        [-1.141165, 0.000000, 0.190029],
        [-0.806926, -0.806926, 0.190029],
        [-0.000000, -1.141165, 0.190029],
        [0.806926, -0.806926, 0.190029],
        [0.570583, 0.236343, -0.427565],
        [-0.236343, 0.570583, -0.427565],
        [-0.570583, -0.236343, -0.427565],
        [0.236343, -0.570583, -0.427565]
    ],
    'JEPBPY-12': [
        [0.891336, -0.000000, 0.523914],
        [0.891336, -0.000000, -0.523914],
        [0.275438, 0.847711, 0.523914],
        [0.275438, 0.847711, -0.523914],
        [-0.721106, 0.523914, 0.523914],
        [-0.721106, 0.523914, -0.523914],
        [-0.721106, -0.523914, 0.523914],
        [-0.721106, -0.523914, -0.523914],
        [0.275438, -0.847711, 0.523914],
        [0.275438, -0.847711, -0.523914],
        [0.000000, -0.000000, 1.074790],
        [0.000000, -0.000000, -1.074790]
    ],
    'JBAPPR-12': [
        [0.852576, 0.489340, -0.061742],
        [0.277323, 0.489340, 0.730026],
        [-0.653457, 0.489340, 0.427597],
        [-0.653457, 0.489340, -0.551082],
        [0.277323, 0.489340, -0.853511],
        [0.852576, -0.489340, -0.061742],
        [0.277323, -0.489340, 0.730026],
        [-0.653457, -0.489340, 0.427597],
        [-0.653457, -0.489340, -0.551082],
        [0.277323, -0.489340, -0.853511],
        [-1.345488, 0.000000, -0.061742],
        [1.124814, 0.000000, 0.740907]
    ],
    'JSPMC-12': [
        [-0.506162, -0.030252, -0.601961],
        [-0.865277, 0.700144, 0.000000],
        [0.000000, 0.841196, -0.506162],
        [-1.298915, -0.214600, 0.000000],
        [0.506162, -0.030252, -0.601961],
        [-0.506162, -0.844158, 0.000000],
        [0.000000, 0.841196, 0.506162],
        [-0.506162, -0.030252, 0.601961],
        [0.865277, 0.700144, 0.000000],
        [0.506162, -0.844158, 0.000000],
        [0.506162, -0.030252, 0.601961],
        [1.298915, -0.214600, 0.000000]
    ]
};

// Normalize all CoSyMlib coordinates (they use scale factor 1.0606, we use unit length)
const COSYMLIB_ML12 = {};
for (const [name, coords] of Object.entries(COSYMLIB_ML12_RAW)) {
    COSYMLIB_ML12[name] = coords.map(normalize);
}

// Calculate RMSD between two geometries
function calculateRMSD(geom1, geom2) {
    if (geom1.length !== geom2.length) {
        return Infinity;
    }

    const n = geom1.length;
    let minRMSD = Infinity;

    // Try all possible vertex mappings (permutations)
    // For efficiency, just try a few common transformations
    const testMappings = [
        // Identity
        [...Array(n).keys()],
        // Rotation by one
        [...Array(n).keys()].map(i => (i + 1) % n),
        // Reflection
        [...Array(n).keys()].reverse()
    ];

    for (const mapping of testMappings) {
        const mapped = mapping.map(i => geom2[i]);

        // Calculate RMSD for this mapping
        let sumSq = 0;
        for (let i = 0; i < n; i++) {
            for (let j = 0; j < 3; j++) {
                const diff = geom1[i][j] - mapped[i][j];
                sumSq += diff * diff;
            }
        }
        const rmsd = Math.sqrt(sumSq / n);
        minRMSD = Math.min(minRMSD, rmsd);
    }

    return minRMSD;
}

// Compare geometries
console.log('=== ML12 Geometry Comparison: Ours vs CoSyMlib ===\n');
console.log('Geometry'.padEnd(40), 'RMSD'.padStart(9), 'Status'.padStart(12));
console.log('-'.repeat(40), '-'.repeat(9), '-'.repeat(10));

const ml12Geometries = REFERENCE_GEOMETRIES[12];
const geometryMapping = {
    'DP-12 (Dodecagon)': 'DP-12',
    'HPY-12 (Hendecagonal Pyramid)': 'HPY-12',
    'DBPY-12 (Decagonal Bipyramid)': 'DBPY-12',
    'HPR-12 (Hexagonal Prism)': 'HPR-12',
    'HAPR-12 (Hexagonal Antiprism)': 'HAPR-12',
    'TT-12 (Truncated Tetrahedron)': 'TT-12',
    'COC-12 (Cuboctahedral)': 'COC-12',
    'ACOC-12 (Anticuboctahedron, J27)': 'ACOC-12',
    'IC-12 (Icosahedral)': 'IC-12',
    'JSC-12 (Square Cupola, J4)': 'JSC-12',
    'JEPBPY-12 (Elongated Pentagonal Bipyramid, J16)': 'JEPBPY-12',
    'JBAPPR-12 (Biaugmented Pentagonal Prism, J53)': 'JBAPPR-12',
    'JSPMC-12 (Sphenomegacorona, J88)': 'JSPMC-12'
};

let perfectCount = 0;
let goodCount = 0;
let reviewCount = 0;
let badCount = 0;

for (const [ourName, cosymlibName] of Object.entries(geometryMapping)) {
    const ourGeom = ml12Geometries[ourName];
    const cosymlibGeom = COSYMLIB_ML12[cosymlibName];

    if (!ourGeom) {
        console.log(ourName.padEnd(40), 'MISSING'.padStart(9), '❌ NOT FOUND'.padStart(12));
        badCount++;
        continue;
    }

    if (!cosymlibGeom) {
        console.log(ourName.padEnd(40), 'N/A'.padStart(9), '⚠️  NO REF'.padStart(12));
        reviewCount++;
        continue;
    }

    const rmsd = calculateRMSD(ourGeom, cosymlibGeom);
    let status;
    if (rmsd < 0.01) {
        status = '✓ PERFECT';
        perfectCount++;
    } else if (rmsd < 0.1) {
        status = '✓ GOOD';
        goodCount++;
    } else if (rmsd < 0.5) {
        status = '⚠️  REVIEW';
        reviewCount++;
    } else {
        status = '❌ BAD';
        badCount++;
    }

    console.log(ourName.padEnd(40), rmsd.toFixed(6).padStart(9), status.padStart(12));
}

console.log('\n=== Summary ===\n');
console.log(`✓ Perfect matches (RMSD < 0.01): ${perfectCount}/13`);
console.log(`✓ Good matches (RMSD < 0.1): ${goodCount}/13`);
console.log(`⚠️  Need review (RMSD 0.1-0.5): ${reviewCount}/13`);
console.log(`❌ Bad matches (RMSD > 0.5): ${badCount}/13`);
