#!/usr/bin/env node

/**
 * Test ML10 geometries against official CoSyMlib references
 */

import { REFERENCE_GEOMETRIES } from './src/constants/referenceGeometries/index.js';

function normalize(v) {
    const len = Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
    return [v[0]/len, v[1]/len, v[2]/len];
}

// Official CoSyMlib ML10 reference geometries (raw from cosym --shp_references_n 10)
const COSYMLIB_ML10_RAW = {
    'DP-10': [[1.048809,-0.000000,0.000000],[0.848504,0.616474,0.000000],[0.324100,0.997476,0.000000],[-0.324100,0.997476,0.000000],[-0.848504,0.616474,0.000000],[-1.048809,0.000000,0.000000],[-0.848504,-0.616474,0.000000],[-0.324100,-0.997476,0.000000],[0.324100,-0.997476,0.000000],[0.848504,-0.616474,0.000000]],
    'EPY-10': [[0.000000,-0.000000,-0.957826],[1.053609,-0.000000,0.095783],[0.807111,0.677247,0.095783],[0.182957,1.037602,0.095783],[-0.526804,0.912452,0.095783],[-0.990069,0.360355,0.095783],[-0.990069,-0.360355,0.095783],[-0.526804,-0.912452,0.095783],[0.182957,-1.037602,0.095783],[0.807111,-0.677247,0.095783]],
    'OBPY-10': [[0.000000,0.000000,-1.048809],[1.048809,0.000000,0.000000],[0.741620,0.741620,0.000000],[0.000000,1.048809,0.000000],[-0.741620,0.741620,0.000000],[-1.048809,0.000000,0.000000],[-0.741620,-0.741620,0.000000],[-0.000000,-1.048809,0.000000],[0.741620,-0.741620,0.000000],[0.000000,0.000000,1.048809]],
    'PPR-10': [[0.904182,-0.000000,-0.531465],[0.279408,0.859928,-0.531465],[-0.731499,0.531465,-0.531465],[-0.731499,-0.531465,-0.531465],[0.279408,-0.859928,-0.531465],[0.904182,-0.000000,0.531465],[0.279408,0.859928,0.531465],[-0.731499,0.531465,0.531465],[-0.731499,-0.531465,0.531465],[0.279408,-0.859928,0.531465]],
    'PAPR-10': [[0.758925,0.551391,-0.469042],[-0.289884,0.892170,-0.469042],[-0.938083,0.000000,-0.469042],[-0.289884,-0.892170,-0.469042],[0.758925,-0.551391,-0.469042],[0.938083,-0.000000,0.469042],[0.289884,0.892170,0.469042],[-0.758925,0.551391,0.469042],[-0.758925,-0.551391,0.469042],[0.289884,-0.892170,0.469042]],
    'JBCCU-10': [[0.785488,0.000000,0.555424],[0.785488,0.000000,-0.555424],[0.000000,0.785488,0.555424],[0.000000,0.785488,-0.555424],[-0.785488,0.000000,0.555424],[-0.785488,0.000000,-0.555424],[-0.000000,-0.785488,0.555424],[-0.000000,-0.785488,-0.555424],[0.000000,0.000000,1.340913],[0.000000,0.000000,-1.340913]],
    'JBCSAPR-10': [[0.831395,0.000000,0.494350],[0.587885,0.587885,-0.494350],[0.000000,0.831395,0.494350],[-0.587885,0.587885,-0.494350],[-0.831395,0.000000,0.494350],[-0.587885,-0.587885,-0.494350],[-0.000000,-0.831395,0.494350],[0.587885,-0.587885,-0.494350],[0.000000,0.000000,1.325745],[0.000000,0.000000,-1.325745]],
    'JMBIC-10': [[-0.797541,-0.588213,-0.373113],[-0.917507,0.299842,0.279142],[-0.042218,0.961291,0.121562],[0.151860,-0.475674,-0.933829],[0.548711,-0.584891,0.811695],[-0.085441,0.301899,1.011328],[0.108597,-1.135033,-0.043961],[0.863981,0.414498,0.450639],[-0.482332,0.411183,-0.734149],[0.618676,0.482007,-0.628091]],
    'JATDI-10': [[-0.001380,-0.287820,-0.953537],[-0.508204,-0.874651,-0.286524],[0.005406,-0.863863,0.597917],[0.829615,-0.270393,0.477497],[0.508402,0.681753,0.286910],[-0.005208,0.670964,-0.597531],[-0.825215,-0.278511,0.481717],[0.514536,-0.869597,-0.289125],[-0.514338,0.676698,0.289511],[-0.003712,1.511869,-0.007028]],
    'JSPC-10': [[-1.001872,-0.083830,-0.581156],[-1.002035,-0.076631,0.581869],[-0.516334,0.802168,-0.005029],[0.028693,0.335227,-0.920231],[-0.064316,-0.772041,-0.576760],[-0.064478,-0.764830,0.586265],[0.028438,0.346602,0.916012],[0.642643,0.705054,-0.004284],[0.974705,-0.249460,-0.579854],[0.974554,-0.242261,0.583171]],
    'SDD-10': [[-0.524414,0.908285,0.000000],[0.524414,0.908285,0.000000],[-1.048828,0.000000,0.000000],[1.048828,0.000000,0.000000],[-0.524414,-0.908285,0.000000],[0.524414,-0.908285,0.000000],[-0.524414,0.000000,0.908285],[0.524414,0.000000,0.908285],[0.262207,0.454143,-0.908285],[-0.262207,-0.454143,-0.908285]],
    'TD-10': [[-0.524414,0.908284,0.000000],[0.524414,0.908284,0.000000],[-1.048827,0.000000,0.000000],[1.048827,0.000000,0.000000],[-0.524414,-0.908284,0.000000],[0.524414,-0.908284,0.000000],[-0.524414,0.000000,0.908284],[0.524414,0.000000,0.908284],[0.000000,0.524414,-0.908284],[0.000000,-0.524414,-0.908284]],
    'HD-10': [[-0.524414,0.908284,0.000000],[0.524414,0.908284,0.000000],[-1.048827,0.000000,0.000000],[1.048827,0.000000,0.000000],[-0.524414,-0.908284,0.000000],[0.524414,-0.908284,0.000000],[-0.524414,0.000000,0.908284],[0.524414,0.000000,0.908284],[-0.524414,0.000000,-0.908284],[0.524414,0.000000,-0.908284]]
};

// Normalize all CoSyMlib references
const COSYMLIB_ML10 = {};
for (const [name, coords] of Object.entries(COSYMLIB_ML10_RAW)) {
    COSYMLIB_ML10[name] = coords.map(normalize);
}

// Map CoSyMlib names to our geometry names
const NAME_MAP = {
    'DP-10': 'DP-10 (Decagon)',
    'EPY-10': 'EPY-10 (Enneagonal Pyramid)',
    'OBPY-10': 'OBPY-10 (Octagonal Bipyramid)',
    'PPR-10': 'PPR-10 (Pentagonal Prism - ECLIPSED)',
    'PAPR-10': 'PAPR-10 (Pentagonal Antiprism - STAGGERED)',
    'JBCCU-10': 'JBCCU-10 (Bicapped Cube, J15)',
    'JBCSAPR-10': 'JBCSAPR-10 (Bicapped Square Antiprism, J17)',
    'JMBIC-10': 'JMBIC-10 (Metabidiminished Icosahedron, J62)',
    'JATDI-10': 'JATDI-10 (Augmented Tridiminished Icosahedron, J64)',
    'JSPC-10': 'JSPC-10 (Sphenocorona, J87)',
    'SDD-10': 'SDD-10 (Staggered Dodecahedron 2:6:2)',
    'TD-10': 'TD-10 (Tetradecahedron 2:6:2)',
    'HD-10': 'HD-10 (Hexadecahedron 2:6:2)'
};

// Calculate RMSD between two sets of coordinates
function calculateRMSD(coords1, coords2) {
    if (coords1.length !== coords2.length) {
        return Infinity;
    }

    let sumSq = 0;
    for (let i = 0; i < coords1.length; i++) {
        const dx = coords1[i][0] - coords2[i][0];
        const dy = coords1[i][1] - coords2[i][1];
        const dz = coords1[i][2] - coords2[i][2];
        sumSq += dx*dx + dy*dy + dz*dz;
    }

    return Math.sqrt(sumSq / coords1.length);
}

console.log('\n=== ML10 Geometry Comparison: Ours vs CoSyMlib ===\n');
console.log('Geometry                                RMSD       Status');
console.log('--------------------------------------  ---------  ----------');

const results = [];

for (const [shortName, cosymlibCoords] of Object.entries(COSYMLIB_ML10)) {
    const fullName = NAME_MAP[shortName];
    const ourCoords = REFERENCE_GEOMETRIES[10][fullName];

    if (!ourCoords) {
        console.log(`${fullName.padEnd(38)}  NOT FOUND  ❌ MISSING`);
        results.push({ shortName, fullName, rmsd: Infinity, status: 'MISSING' });
        continue;
    }

    const rmsd = calculateRMSD(ourCoords, cosymlibCoords);

    let status = '✓ PERFECT';
    if (rmsd > 0.01) status = '✓ GOOD';
    if (rmsd > 0.1) status = '⚠️  CHECK';
    if (rmsd > 0.5) status = '❌ BAD';

    console.log(`${fullName.padEnd(38)}  ${rmsd.toFixed(6).padStart(9)}  ${status}`);
    results.push({ shortName, fullName, rmsd, status });
}

console.log('\n=== Summary ===\n');

const perfect = results.filter(r => r.rmsd < 0.01);
const good = results.filter(r => r.rmsd >= 0.01 && r.rmsd < 0.1);
const check = results.filter(r => r.rmsd >= 0.1 && r.rmsd < 0.5);
const bad = results.filter(r => r.rmsd >= 0.5);

console.log(`✓ Perfect matches (RMSD < 0.01): ${perfect.length}/13`);
console.log(`✓ Good matches (RMSD < 0.1): ${good.length}/13`);
console.log(`⚠️  Need review (RMSD 0.1-0.5): ${check.length}/13`);
console.log(`❌ Bad matches (RMSD > 0.5): ${bad.length}/13`);

if (check.length > 0 || bad.length > 0) {
    console.log('\n=== Geometries Needing Updates ===\n');
    [...check, ...bad].sort((a, b) => b.rmsd - a.rmsd).forEach(r => {
        console.log(`${r.shortName}: RMSD = ${r.rmsd.toFixed(6)}`);
    });
}
